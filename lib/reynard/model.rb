# frozen_string_literal: true

class Reynard
  # Superclass for dynamic classes generated by the object builder.
  class Model
    class << self
      # Holds references to the full schema for the model if available.
      attr_accessor :schema
    end

    def initialize(attributes)
      self.attributes = attributes
    end

    def attributes=(attributes)
      attributes.each do |name, value|
        instance_variable_set("@#{name}", self.class.cast(name, value))
      end
    end

    # Until we can set accessors based on the schema
    def method_missing(attribute_name, *)
      instance_variable_get("@#{attribute_name}")
    rescue NameError
      raise NoMethodError, "undefined method `#{attribute_name}' for #{inspect}"
    end

    def respond_to_missing?(attribute_name, *)
      instance_variable_defined?("@#{attribute_name}")
    rescue NameError
      false
    end

    def self.cast(name, value)
      return value unless schema

      property = schema.property_schema(name)
      return value unless property

      Reynard::ObjectBuilder.new(schema: property, parsed_body: value).call
    end
  end
end
