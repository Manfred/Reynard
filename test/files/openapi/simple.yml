openapi: "3.0.0"
info:
  title: Library
  version: 1.0.0
  contact: {}
  description: It books!
servers:
  - url: http://example.com/v1
  - url: http://staging.example.com/v1
tags:
  - name: books
    description: Book operations
  - name: book_covers
    description: Book cover operations
paths:
  /books:
    get:
      summary: List all books
      description: List all of the books.
      operationId: listBooks
      tags:
        - books
      parameters:
        - name: order
          in: query
          description: The order of the returned items.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of books.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create book
      description: Create a new book.
      operationId: createBook
      tags:
        - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        '200':
          description: A book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /books/{id}:
    get:
      summary: Fetch book
      description: Fetch all details for a book.
      operationId: fetchBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: The numeric ID of the book.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put: &update
      summary: Update book
      description: Update details for a book.
      operationId: updateBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: The numeric ID of the book.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      <<: *update
      operationId: updateBook2
    delete:
      summary: Delete book
      description: Delete a book.
      operationId: deleteBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: The numeric ID of the book.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book was deleted.
        default:
          description: Book was deleted.
  /books/sample:
    get:
      summary: Fetch a random book
      description: Fetch all details for a random book.
      operationId: sampleBook
      tags:
        - books
      responses:
        '200':
          description: A book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /search/books:
    get:
      summary: Find books
      description: Search books title and descriptions.
      operationId: searchBooks
      tags:
        - books
      parameters:
        - name: q
          in: query
          description: A search string to look for during the search.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An array of books.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /books/covers:
    post:
      summary: Create a new book cover.
      description: Create a new book cover.
      operationId: createBookCover
      tags:
        - book_covers
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateBookCover"
      responses:
        '200':
          description: A book cover.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCover"
        default:
          description: An error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Book:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Books:
      type: array
      items:
        $ref: "#/components/schemas/Book"
    CreateBookCover:
      type: object
      required:
        - size
        - subject
        - attachment
      properties:
        size:
          type: string
        subject:
          type: string
        attachment:
          type: string
          format: binary
    BookCover:
      type: object
      required:
        - size
        - subject
      properties:
        size:
          type: string
        subject:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
